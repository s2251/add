/*PRIMS ALGO*/

#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

// Structure to represent a graph edge
struct Edge {
    int dest;
    int weight;
};

// Structure to represent a graph node
struct Node {
    int vertex;
    int key;
};

// Comparison function for priority queue
struct CompareNode {
    bool operator()(const Node& n1, const Node& n2) {
        return n1.key > n2.key;
    }
};

// Function to perform Prim's algorithm
void prim(vector<vector<Edge>>& graph, int source) {
    int V = graph.size();
    vector<int> parent(V, -1);
    vector<bool> inMST(V, false);
    vector<int> key(V, INT_MAX);
    priority_queue<Node, vector<Node>, CompareNode> pq;

    pq.push({source, 0});
    key[source] = 0;

    while (!pq.empty()) {
        int u = pq.top().vertex;
        pq.pop();

        if (inMST[u])
            continue;

        inMST[u] = true;

        for (const auto& edge : graph[u]) {
            int v = edge.dest;
            int weight = edge.weight;

            if (!inMST[v] && weight < key[v]) {
                parent[v] = u;
                key[v] = weight;
                pq.push({v, key[v]});
            }
        }
    }

    cout << "Edges in the Minimum Spanning Tree (MST):\n";
    for (int i = 1; i < V; ++i) {
        cout << "Edge: " << parent[i] << " - " << i << " Weight: " << key[i] << "\n";
    }
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    vector<vector<Edge>> graph(V);

    cout << "Enter the edges (source destination weight):\n";
    for (int i = 0; i < E; ++i) {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        graph[src].push_back({dest, weight});
        graph[dest].push_back({src, weight}); // Assuming undirected graph
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    prim(graph, source);

    return 0;
}
